<?php
namespace pyd\testkit\web\exceptions;

use Yii;
use yii\base\InvalidCallException;
use yii\web\Response;
use yii\helpers\StringHelper;
use pyd\testkit\Test;
use pyd\testkit\AssertionMessage;
use yii\base\InvalidParamException;
use yii\web\ServerErrorHttpException;

/**
 * Base class for exception pages with default content.
 *
 * This 'default content' is generated by the @see \yii\base\ErrorHandler::convertExceptionToString()
 * method in test environment (YII_ENV === 'test').
 * Therefore, it should not work with customized error handler and/or view.
 *
 * @author pyd <pierre.yves.delettre@gmail.com>
 */
class Page extends \pyd\testkit\web\Page
{
    /**
     * @var string the start of the source
     */
    public $sourceStart = '<html><head></head><body><pre>';
    /**
     * @var string the end of the source
     */
    public $sourceEnd = '</pre></body></html>';
    /**
     * @var string the page source
     */
    private $_source;
    /**
     * @var string the exception message
     */
    private $_message;

    /**
     * @inheritdoc
     * @see $_source
     */
    public function getSource()
    {
        if (null === $this->_source) {
            $this->_source = parent::getSource();
        }
        return $this->_source;
    }


    /**
     * This is an exception page displayed in the browser.
     *
     * @return boolean
     */
    public function isDisplayed()
    {
        $source = $this->getSource();
        if (false !== strpos($source, $this->sourceStart) && false !== strrpos($source, $this->sourceEnd)) {
                AssertionMessage::set("This is an exception page.");
                return true;
        } else {
                AssertionMessage::set("This is not an exception page.");
                return false;
        }
    }

    /**
     * Exception message contains some text.
     *
     * @param string $text searched text
     * @return boolean
     */
    public function messageContains($text)
    {
        if (false !== strpos($this->getMessage(), $text)) {
            AssertionMessage::set("Exception page message contains '$text' text.");
            return true;
        } else {
            AssertionMessage::set("Exception page message does not contain '$text' text.");
            return false;
        }
    }

    /**
     * Verify that the text of the exception page corresponds to the expected
     * http code.
     *
     * @see yii\web\response::$httpStatuses
     *
     * @param integer $httpCode expected code
     * @return boolean
     * @throws InvalidParamException
     */
    public function matchHttpCode($httpCode)
    {
        if (isset(Response::$httpStatuses[$httpCode])) {
            $codeAsText = Response::$httpStatuses[$httpCode];
        } else {
            throw new InvalidParamException("Cannot verify http code $httpCode because "
                    . "it's not defined in yii\web\Response::\$httpStatuses");
        }

        if ($this->messageContains($codeAsText)) {
            AssertionMessage::set("This exception page display a '$httpCode - $codeAsText' message.");
            return true;
        } else {
            AssertionMessage::set("This exception page does not display a '$httpCode - $codeAsText' message.");
            AssertionMessage::add("Message is '" .$this->getMessage(). "'.");
            return false;
        }
    }

    /**
     * Get the exception message.
     * @return string
     * @throws InvalidCallException this is not an exception page
     * @throws ServerErrorHttpException preg_match method extraction failure
     */
    public function getMessage()
    {
        if (null === $this->_message) {

            $pattern = "`$this->sourceStart(?<msg>.*)$this->sourceEnd`";

            switch (preg_match($pattern, $this->getSource(), $matches)) {
                case 1:
                    $this->_message = $matches['msg'];
                    break;
                case 0:
                    throw new InvalidCallException("Cannot extract exception message from the page source. This is not an exception page.");
                case false:
                    throw new ServerErrorHttpException("Error while parsing page source with preg_match method.");

            }
        }
        return $this->_message;
    }

    /**
     * Disable this method because an exception page can not be loaded.
     * @param array $urlParams
     * @param type $verifyDisplay
     * @throws InvalidCallException
     */
    public function load(array $urlParams = array(), $verifyDisplay = true)
    {
        throw new InvalidCallException("Cannot load an exception page.");
    }
}
